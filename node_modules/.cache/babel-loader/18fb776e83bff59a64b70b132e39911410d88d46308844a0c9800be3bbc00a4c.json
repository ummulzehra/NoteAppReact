{"ast":null,"code":"var _jsxFileName = \"D:\\\\HTML Projects\\\\NoteAppReact\\\\src\\\\components\\\\NoteView.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport \"../styles/NoteView.Module.css\";\nimport NoteHeader from \"./NoteHeader\";\nimport Input from \"./Input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteView = _ref => {\n  _s();\n  let {\n    name,\n    color,\n    id,\n    isMobile,\n    display,\n    setDisplay\n  } = _ref;\n  const [notes, setNotes] = React.useState([]);\n  const [groupId, setGroupId] = React.useState(\"\");\n  const [newNote, setNewNote] = React.useState({});\n  React.useEffect(() => {\n    const noteGroups = JSON.parse(localStorage.getItem(\"noteGroups\"));\n    const groupIndex = noteGroups.findIndex(group => group.id === id);\n    if (groupIndex === -1) {\n      console.error(`Group with ID ${id} not found`);\n      return;\n    }\n    const group = noteGroups[groupIndex];\n    setGroupId(group.id);\n    setNotes([...group.notes], newNote);\n  }, [id, newNote]);\n  const handleNewNote = value => {\n    setNewNote(value);\n    setNotes([...notes, value]);\n  };\n\n  // Function to format date and time\n  const formatDateTime = dateStr => {\n    const date = new Date(dateStr);\n    const dateOptions = {\n      day: 'numeric',\n      month: 'short',\n      year: 'numeric'\n    };\n    const timeOptions = {\n      hour: 'numeric',\n      minute: 'numeric',\n      hour12: true\n    };\n    const formattedDate = new Intl.DateTimeFormat('en-GB', dateOptions).format(date);\n    const formattedTime = new Intl.DateTimeFormat('en-GB', timeOptions).format(date);\n    return {\n      date: formattedDate,\n      time: formattedTime\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"note-view-container\",\n    style: {\n      display: isMobile && !display ? \"none\" : \"\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(NoteHeader, {\n      name: name,\n      color: color,\n      isMobile: isMobile,\n      display: display,\n      setDisplay: setDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), groupId === id && notes && notes.map((note, index) => {\n      const {\n        date,\n        time\n      } = formatDateTime(note.date);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"note-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"note-content\",\n          children: note.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"note-footer\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"note-date-time\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"note-date\",\n              children: date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"bullet\",\n              children: \"\\u2022\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"note-time\",\n              children: time\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this);\n    }), notes && notes.length <= 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"example-txt\",\n      children: \"Start Writing Notes Here!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      id: id,\n      handleNewNote: handleNewNote\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteView, \"5ZuEu69aDOOlVdLCLfd6jd43KYI=\");\n_c = NoteView;\nexport default NoteView;\nvar _c;\n$RefreshReg$(_c, \"NoteView\");","map":{"version":3,"names":["React","NoteHeader","Input","jsxDEV","_jsxDEV","NoteView","_ref","_s","name","color","id","isMobile","display","setDisplay","notes","setNotes","useState","groupId","setGroupId","newNote","setNewNote","useEffect","noteGroups","JSON","parse","localStorage","getItem","groupIndex","findIndex","group","console","error","handleNewNote","value","formatDateTime","dateStr","date","Date","dateOptions","day","month","year","timeOptions","hour","minute","hour12","formattedDate","Intl","DateTimeFormat","format","formattedTime","time","className","style","children","fileName","_jsxFileName","lineNumber","columnNumber","map","note","index","content","length","_c","$RefreshReg$"],"sources":["D:/HTML Projects/NoteAppReact/src/components/NoteView.jsx"],"sourcesContent":["import React from \"react\";\r\nimport \"../styles/NoteView.Module.css\";\r\nimport NoteHeader from \"./NoteHeader\";\r\nimport Input from \"./Input\";\r\n\r\nconst NoteView = ({ name, color, id, isMobile, display, setDisplay }) => {\r\n  const [notes, setNotes] = React.useState([]);\r\n  const [groupId, setGroupId] = React.useState(\"\");\r\n  const [newNote, setNewNote] = React.useState({});\r\n\r\n  React.useEffect(() => {\r\n    const noteGroups = JSON.parse(localStorage.getItem(\"noteGroups\"));\r\n    const groupIndex = noteGroups.findIndex((group) => group.id === id);\r\n    if (groupIndex === -1) {\r\n      console.error(`Group with ID ${id} not found`);\r\n      return;\r\n    }\r\n    const group = noteGroups[groupIndex];\r\n    setGroupId(group.id);\r\n    setNotes([...group.notes], newNote);\r\n  }, [id, newNote]);\r\n\r\n  const handleNewNote = (value) => {\r\n    setNewNote(value);\r\n    setNotes([...notes, value]);\r\n  };\r\n\r\n  // Function to format date and time\r\n  const formatDateTime = (dateStr) => {\r\n    const date = new Date(dateStr);\r\n    const dateOptions = { day: 'numeric', month: 'short', year: 'numeric' };\r\n    const timeOptions = { hour: 'numeric', minute: 'numeric', hour12: true };\r\n\r\n    const formattedDate = new Intl.DateTimeFormat('en-GB', dateOptions).format(date);\r\n    const formattedTime = new Intl.DateTimeFormat('en-GB', timeOptions).format(date);\r\n\r\n    return { date: formattedDate, time: formattedTime };\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"note-view-container\"\r\n      style={{ display: isMobile && !display ? \"none\" : \"\" }}\r\n    >\r\n      <NoteHeader\r\n        name={name}\r\n        color={color}\r\n        isMobile={isMobile}\r\n        display={display}\r\n        setDisplay={setDisplay}\r\n      />\r\n      {groupId === id &&\r\n        notes &&\r\n        notes.map((note, index) => {\r\n          const { date, time } = formatDateTime(note.date);\r\n\r\n          return (\r\n            <div className=\"note-box\" key={index}>\r\n              <div className=\"note-content\">{note.content}</div>\r\n              <div className=\"note-footer\">\r\n                <div className=\"note-date-time\">\r\n                  <span className=\"note-date\">{date}</span>\r\n                  <span className=\"bullet\">â€¢</span>\r\n                  <span className=\"note-time\">{time}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      {notes && notes.length <= 0 && (\r\n        <p className=\"example-txt\">Start Writing Notes Here!</p>\r\n      )}\r\n      <Input id={id} handleNewNote={handleNewNote} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoteView;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}